# Kafka Food Processing Pipeline - Environment Configuration Template
# Copy this file to .env and fill in your actual values
# NEVER commit .env to version control (contains secrets)

# ==============================================================================
# KAFKA CONFIGURATION
# ==============================================================================

# KAFKA_BOOTSTRAP_SERVERS: Comma-separated list of Kafka broker addresses
# - "Bootstrap" servers are the initial contact points for Kafka clients
# - Clients discover other brokers from these initial connections
# - Format: host:port (9092 is standard Kafka port)
# - Local: Uses Docker service name 'kafka' (Docker networking resolves this)
# - AWS: Use actual EC2 instance IP or hostname
KAFKA_BOOTSTRAP_SERVERS=kafka:9092

# KAFKA_TOPIC_ORDERS: The topic where food orders are published/consumed
# - Topics are Kafka's way of organizing message streams (like database tables)
# - Producers write to topics, consumers read from topics
# - This topic will have 3 partitions for parallel processing
KAFKA_TOPIC_ORDERS=food-orders

# KAFKA_CONSUMER_GROUP: Consumer group ID for order processors
# - Consumer groups enable parallel processing and load balancing
# - Multiple consumers in same group share partition workload
# - Each partition assigned to only ONE consumer in a group
# - Example: 3 partitions, 2 consumers â†’ one gets 2 partitions, one gets 1
KAFKA_CONSUMER_GROUP=order-processors

# KAFKA_AUTO_OFFSET_RESET: What to do when consumer has no committed offset
# - 'earliest': Start reading from beginning of topic (all historical messages)
# - 'latest': Only read new messages published after consumer starts
# - For learning/development, use 'earliest' to see all messages
# - Production typically uses 'latest' to avoid reprocessing old data
KAFKA_AUTO_OFFSET_RESET=earliest

# KAFKA_ENABLE_AUTO_COMMIT: Whether consumer automatically commits offsets
# - 'false' (recommended): Manual commit after successful processing
# - 'true': Auto-commit at intervals (risk of message loss on crash)
# - Manual commit ensures "at least once" processing semantics
KAFKA_ENABLE_AUTO_COMMIT=false

# ==============================================================================
# DATABASE CONFIGURATION
# ==============================================================================

# PostgreSQL connection settings for order storage

# DB_HOST: Database server hostname
# - Local: Docker service name 'postgres'
# - AWS: Could use RDS endpoint or localhost if PostgreSQL in same EC2 instance
DB_HOST=postgres

# DB_PORT: PostgreSQL default port
DB_PORT=5432

# DB_NAME: Database name for order data
DB_NAME=food_orders

# DB_USER: Database username
# - Change this in production!
DB_USER=kafka_user

# DB_PASSWORD: Database password
# - CHANGE THIS IN PRODUCTION!
# - Use strong passwords (20+ characters, random)
# - Consider AWS Secrets Manager for production
DB_PASSWORD=kafka_password_local

# DB_POOL_SIZE: Number of database connections to maintain in pool
# - Connection pooling reuses connections instead of creating new ones
# - Value depends on expected load (10-20 is common)
# - For learning project with low volume, 5 is sufficient
DB_POOL_SIZE=5

# ==============================================================================
# APPLICATION CONFIGURATION
# ==============================================================================

# ORDER_GENERATION_RATE: Orders produced per second
# - Controls simulation speed
# - Start low (1-5 ops) for debugging, increase to test throughput
# - 10 ops/sec = 600 orders/minute = good for demo without overwhelming logs
ORDER_GENERATION_RATE=10

# LOG_LEVEL: Logging verbosity
# - DEBUG: Very detailed, use for development/troubleshooting
# - INFO: General informational messages (recommended for production)
# - WARNING: Only warnings and errors
# - ERROR: Only errors
LOG_LEVEL=INFO

# LOG_FORMAT: Log output format
# - 'json': Structured logs, easy to parse and search (recommended for production)
# - 'text': Human-readable format for local development
LOG_FORMAT=json

# ==============================================================================
# AWS DEPLOYMENT OVERRIDES
# ==============================================================================
# When deploying to AWS t2.small instance, override these values:
#
# KAFKA_BOOTSTRAP_SERVERS=localhost:9092  # Kafka running on same EC2 instance
# DB_HOST=localhost                        # PostgreSQL on same EC2 instance
# LOG_LEVEL=INFO                          # Less verbose for production
# ORDER_GENERATION_RATE=5                 # Lower rate for resource-constrained t2.small
#
# Memory constraints on t2.small (2GB RAM):
# - Kafka JVM heap: 512MB
# - PostgreSQL shared buffers: 256MB
# - Producer/Consumer: 128MB each
# - OS + other services: ~1GB remaining

# ==============================================================================
# DEVELOPMENT / TESTING OVERRIDES
# ==============================================================================
# For integration tests using testcontainers, these will be overridden
# programmatically with container-assigned ports
