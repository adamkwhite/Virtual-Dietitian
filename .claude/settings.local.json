{
  "permissions": {
    "allow": [
      "Bash(gcloud config:*)",
      "Bash(gcloud services:*)",
      "Bash(python3:*)",
      "Read(//home/adam/Code/Virtual-Dietitian/issues/**)",
      "Bash(gcloud functions deploy:*)",
      "Bash(gh pr list:*)",
      "Read(//home/adam/Code/**)",
      "Bash(gcloud functions describe:*)",
      "Bash(gcloud functions list:*)",
      "Bash(gcloud alpha agent list:*)",
      "Bash(gsutil mb:*)",
      "WebSearch",
      "Bash(curl:*)",
      "Bash(pip install:*)",
      "Bash(pre-commit run:*)",
      "Bash(gh pr checks:*)",
      "Bash(pytest:*)",
      "Bash(python -m pytest test_main.py -v)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(gh pr merge:*)",
      "mcp__time__get_current_time",
      "Bash(git mv:*)",
      "Bash(gh pr view:*)",
      "Bash(git checkout -b feature/cnf-api-integration)",
      "Bash(cat requirements.txt)",
      "Bash(source virtual-dietitian-venv/bin/activate)",
      "Bash(python -m pytest test_cnf_client.py -v)",
      "Bash(python -m pytest test_cnf_client.py --cov=cnf_client --cov-report=term-missing)",
      "Bash(python -m pytest --cov --cov-report=term-missing -v)",
      "Bash(git commit -m \"$(cat <<''EOF''\nAdd CNF API integration with 3-tier fallback\n\nImplements Canadian Nutrient File (CNF) API client to expand food database\nfrom 47 foods to 5,690+ foods. Adds 3-tier fallback system:\nLocal DB (47 foods) â†’ CNF API (5,690 foods) â†’ USDA API (500k+ foods).\n\nChanges:\n- cnf_client.py: Complete CNF API client with caching and normalization\n- test_cnf_client.py: Comprehensive unit tests (33 tests, 100% coverage)\n- main.py: Add ENABLE_CNF_API environment variable flag\n- nutrition_calculator.py: Integrate 3-tier fallback in find_food()\n- manual_test_cnf.py: Manual integration test script (renamed from test_cnf_local.py)\n\nFeatures:\n- In-memory caching for 5,690 food list (downloaded once on cold start)\n- Fuzzy food search: exact match â†’ contains â†’ reverse contains\n- Per-food-code nutrition caching\n- Nutrient normalization to internal schema\n- Category inference from nutritional profile\n- Singleton pattern for shared client instance\n- Graceful error handling with fallback to next tier\n\nTest Coverage:\n- CNF client: 100% coverage (102 statements)\n- Overall project: 94% coverage (up from 44.8%)\n- All 89 automated tests passing\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")"
    ],
    "deny": [],
    "ask": []
  }
}
